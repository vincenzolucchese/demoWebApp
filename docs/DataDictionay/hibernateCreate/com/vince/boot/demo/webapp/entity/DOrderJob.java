package com.vince.boot.demo.webapp.entity;
// Generated 4-ott-2017 15.34.34 by Hibernate Tools 3.2.2.GA


import java.math.BigDecimal;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * DOrderJob generated by hbm2java
 */
@Entity
@Table(name="d_order_job"
    ,catalog="demo"
)
public class DOrderJob  implements java.io.Serializable {


     private long id;
     private DClientApp DClientApp;
     private String userInsert;
     private String userUpdate;
     private Date timeInsert;
     private Date timeUpdate;
     private String notes;
     private String codeOrder;
     private Date dataScadenza;
     private Date yearRefer;
     private BigDecimal preAmount;
     private BigDecimal finalAmount;
     private Character flagActive;
     private String address;
     private Set<DRelOrderBlob> DRelOrderBlobs = new HashSet<DRelOrderBlob>(0);

    public DOrderJob() {
    }

	
    public DOrderJob(long id, DClientApp DClientApp, String userInsert, Date timeInsert, String notes, Date yearRefer) {
        this.id = id;
        this.DClientApp = DClientApp;
        this.userInsert = userInsert;
        this.timeInsert = timeInsert;
        this.notes = notes;
        this.yearRefer = yearRefer;
    }
    public DOrderJob(long id, DClientApp DClientApp, String userInsert, String userUpdate, Date timeInsert, Date timeUpdate, String notes, String codeOrder, Date dataScadenza, Date yearRefer, BigDecimal preAmount, BigDecimal finalAmount, Character flagActive, String address, Set<DRelOrderBlob> DRelOrderBlobs) {
       this.id = id;
       this.DClientApp = DClientApp;
       this.userInsert = userInsert;
       this.userUpdate = userUpdate;
       this.timeInsert = timeInsert;
       this.timeUpdate = timeUpdate;
       this.notes = notes;
       this.codeOrder = codeOrder;
       this.dataScadenza = dataScadenza;
       this.yearRefer = yearRefer;
       this.preAmount = preAmount;
       this.finalAmount = finalAmount;
       this.flagActive = flagActive;
       this.address = address;
       this.DRelOrderBlobs = DRelOrderBlobs;
    }
   
     @Id 
    
    @Column(name="id", unique=true, nullable=false)
    public long getId() {
        return this.id;
    }
    
    public void setId(long id) {
        this.id = id;
    }
@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="fk_id_client", nullable=false)
    public DClientApp getDClientApp() {
        return this.DClientApp;
    }
    
    public void setDClientApp(DClientApp DClientApp) {
        this.DClientApp = DClientApp;
    }
    
    @Column(name="user_insert", nullable=false, length=100)
    public String getUserInsert() {
        return this.userInsert;
    }
    
    public void setUserInsert(String userInsert) {
        this.userInsert = userInsert;
    }
    
    @Column(name="user_update", length=100)
    public String getUserUpdate() {
        return this.userUpdate;
    }
    
    public void setUserUpdate(String userUpdate) {
        this.userUpdate = userUpdate;
    }
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="time_insert", nullable=false, length=19)
    public Date getTimeInsert() {
        return this.timeInsert;
    }
    
    public void setTimeInsert(Date timeInsert) {
        this.timeInsert = timeInsert;
    }
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="time_update", length=19)
    public Date getTimeUpdate() {
        return this.timeUpdate;
    }
    
    public void setTimeUpdate(Date timeUpdate) {
        this.timeUpdate = timeUpdate;
    }
    
    @Column(name="notes", nullable=false, length=2000)
    public String getNotes() {
        return this.notes;
    }
    
    public void setNotes(String notes) {
        this.notes = notes;
    }
    
    @Column(name="code_order", length=20)
    public String getCodeOrder() {
        return this.codeOrder;
    }
    
    public void setCodeOrder(String codeOrder) {
        this.codeOrder = codeOrder;
    }
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="data_scadenza", length=19)
    public Date getDataScadenza() {
        return this.dataScadenza;
    }
    
    public void setDataScadenza(Date dataScadenza) {
        this.dataScadenza = dataScadenza;
    }
    @Temporal(TemporalType.DATE)
    @Column(name="year_refer", nullable=false, length=10)
    public Date getYearRefer() {
        return this.yearRefer;
    }
    
    public void setYearRefer(Date yearRefer) {
        this.yearRefer = yearRefer;
    }
    
    @Column(name="pre_amount", precision=10)
    public BigDecimal getPreAmount() {
        return this.preAmount;
    }
    
    public void setPreAmount(BigDecimal preAmount) {
        this.preAmount = preAmount;
    }
    
    @Column(name="final_amount", precision=10)
    public BigDecimal getFinalAmount() {
        return this.finalAmount;
    }
    
    public void setFinalAmount(BigDecimal finalAmount) {
        this.finalAmount = finalAmount;
    }
    
    @Column(name="flag_active", length=1)
    public Character getFlagActive() {
        return this.flagActive;
    }
    
    public void setFlagActive(Character flagActive) {
        this.flagActive = flagActive;
    }
    
    @Column(name="address", length=2000)
    public String getAddress() {
        return this.address;
    }
    
    public void setAddress(String address) {
        this.address = address;
    }
@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy="DOrderJob")
    public Set<DRelOrderBlob> getDRelOrderBlobs() {
        return this.DRelOrderBlobs;
    }
    
    public void setDRelOrderBlobs(Set<DRelOrderBlob> DRelOrderBlobs) {
        this.DRelOrderBlobs = DRelOrderBlobs;
    }




}


