/*
 * This file is generated by jOOQ.
*/
package com.vince.boot.demo.webapp.jooq.tables;


import com.vince.boot.demo.webapp.jooq.Demo;
import com.vince.boot.demo.webapp.jooq.Indexes;
import com.vince.boot.demo.webapp.jooq.Keys;
import com.vince.boot.demo.webapp.jooq.tables.records.DOrderJobRecord;

import java.math.BigDecimal;
import java.sql.Date;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DOrderJob extends TableImpl<DOrderJobRecord> {

    private static final long serialVersionUID = 1287215688;

    /**
     * The reference instance of <code>demo.d_order_job</code>
     */
    public static final DOrderJob D_ORDER_JOB = new DOrderJob();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DOrderJobRecord> getRecordType() {
        return DOrderJobRecord.class;
    }

    /**
     * The column <code>demo.d_order_job.user_insert</code>.
     */
    public final TableField<DOrderJobRecord, String> USER_INSERT = createField("user_insert", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>demo.d_order_job.user_update</code>.
     */
    public final TableField<DOrderJobRecord, String> USER_UPDATE = createField("user_update", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>demo.d_order_job.time_insert</code>.
     */
    public final TableField<DOrderJobRecord, Timestamp> TIME_INSERT = createField("time_insert", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>demo.d_order_job.time_update</code>.
     */
    public final TableField<DOrderJobRecord, Timestamp> TIME_UPDATE = createField("time_update", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>demo.d_order_job.id</code>.
     */
    public final TableField<DOrderJobRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>demo.d_order_job.fk_id_client</code>.
     */
    public final TableField<DOrderJobRecord, Long> FK_ID_CLIENT = createField("fk_id_client", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>demo.d_order_job.notes</code>.
     */
    public final TableField<DOrderJobRecord, String> NOTES = createField("notes", org.jooq.impl.SQLDataType.VARCHAR(2000).nullable(false), this, "");

    /**
     * The column <code>demo.d_order_job.code_order</code>.
     */
    public final TableField<DOrderJobRecord, String> CODE_ORDER = createField("code_order", org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>demo.d_order_job.data_scadenza</code>.
     */
    public final TableField<DOrderJobRecord, Timestamp> DATA_SCADENZA = createField("data_scadenza", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>demo.d_order_job.year_refer</code>.
     */
    public final TableField<DOrderJobRecord, Date> YEAR_REFER = createField("year_refer", org.jooq.impl.SQLDataType.DATE.nullable(false), this, "");

    /**
     * The column <code>demo.d_order_job.pre_amount</code>.
     */
    public final TableField<DOrderJobRecord, BigDecimal> PRE_AMOUNT = createField("pre_amount", org.jooq.impl.SQLDataType.DECIMAL(10, 2), this, "");

    /**
     * The column <code>demo.d_order_job.final_amount</code>.
     */
    public final TableField<DOrderJobRecord, BigDecimal> FINAL_AMOUNT = createField("final_amount", org.jooq.impl.SQLDataType.DECIMAL(10, 2), this, "");

    /**
     * The column <code>demo.d_order_job.flag_active</code>.
     */
    public final TableField<DOrderJobRecord, String> FLAG_ACTIVE = createField("flag_active", org.jooq.impl.SQLDataType.CHAR(1), this, "");

    /**
     * The column <code>demo.d_order_job.address</code>.
     */
    public final TableField<DOrderJobRecord, String> ADDRESS = createField("address", org.jooq.impl.SQLDataType.VARCHAR(2000), this, "");

    /**
     * Create a <code>demo.d_order_job</code> table reference
     */
    public DOrderJob() {
        this(DSL.name("d_order_job"), null);
    }

    /**
     * Create an aliased <code>demo.d_order_job</code> table reference
     */
    public DOrderJob(String alias) {
        this(DSL.name(alias), D_ORDER_JOB);
    }

    /**
     * Create an aliased <code>demo.d_order_job</code> table reference
     */
    public DOrderJob(Name alias) {
        this(alias, D_ORDER_JOB);
    }

    private DOrderJob(Name alias, Table<DOrderJobRecord> aliased) {
        this(alias, aliased, null);
    }

    private DOrderJob(Name alias, Table<DOrderJobRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Demo.DEMO;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.D_ORDER_JOB_IX_RELATIONSHIP28, Indexes.D_ORDER_JOB_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DOrderJobRecord> getPrimaryKey() {
        return Keys.KEY_D_ORDER_JOB_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DOrderJobRecord>> getKeys() {
        return Arrays.<UniqueKey<DOrderJobRecord>>asList(Keys.KEY_D_ORDER_JOB_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<DOrderJobRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DOrderJobRecord, ?>>asList(Keys.RELATIONSHIP28);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DOrderJob as(String alias) {
        return new DOrderJob(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DOrderJob as(Name alias) {
        return new DOrderJob(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DOrderJob rename(String name) {
        return new DOrderJob(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DOrderJob rename(Name name) {
        return new DOrderJob(name, null);
    }
}
